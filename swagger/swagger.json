{
  "openapi": "3.0.0",
  "info": {
    "title": "Go Auth System API",
    "version": "1.0.0"
  },
  "servers": [
    { "url": "http://localhost:8080" }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string" },
                  "first_name": { "type": "string" },
                  "last_name": { "type": "string" }
                },
                "required": ["email", "password", "first_name", "last_name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "User registered successfully" },
                    "user_id": { "type": "integer", "example": 1 },
                    "verification_token": { 
                      "type": "string", 
                      "example": "a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456",
                      "description": "Email verification token (for testing purposes)"
                    },
                    "verification_url": { 
                      "type": "string", 
                      "example": "/auth/verify?token=a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456",
                      "description": "Complete verification URL"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid input" },
          "409": { "description": "User already exists" }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login and get JWT tokens",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string" }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": { "type": "string" },
                    "refresh_token": { "type": "string" }
                  }
                }
              }
            }
          },
          "401": { "description": "Invalid credentials" }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh JWT tokens",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refresh_token": { "type": "string" }
                },
                "required": ["refresh_token"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": { "type": "string" },
                    "refresh_token": { "type": "string" }
                  }
                }
              }
            }
          },
          "401": { "description": "Invalid or expired refresh token" }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Logout and revoke access token",
        "description": "Logs out the current user and blacklists their access token. Optionally accepts a refresh token to revoke it as well.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refresh_token": { 
                    "type": "string",
                    "description": "Optional refresh token to revoke"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Logged out successfully" }
                  }
                }
              }
            }
          },
          "401": { 
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          },
          "500": { 
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "Invalid user context" }
                  }
                }
              }
            }
          }
        },
        "tags": ["auth"]
      }
    },
    "/auth/verify": {
      "get": {
        "summary": "Verify email with token",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Email verified" },
          "400": { "description": "Invalid or expired token" }
        }
      }
    },
    "/auth/password/forgot": {
      "post": {
        "summary": "Send password reset token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "format": "email" }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": { 
            "description": "Password reset email sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { 
                      "type": "string", 
                      "example": "If the email exists, a password reset link has been sent" 
                    },
                    "reset_token": { 
                      "type": "string", 
                      "example": "b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef1234567",
                      "description": "Password reset token (for testing purposes - remove in production)"
                    }
                  }
                }
              }
            }
          },
          "400": { 
            "description": "Invalid email format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "Invalid email format" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/password/reset": {
      "post": {
        "summary": "Reset password with token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": { "type": "string" },
                  "new_password": { "type": "string" }
                },
                "required": ["token", "new_password"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Password reset successful" },
          "400": { "description": "Invalid or expired token" }
        }
      }
    },
    "/csrf-token": {
      "get": {
        "summary": "Get CSRF token",
        "responses": {
          "200": {
            "description": "CSRF token generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "csrf_token": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "summary": "Get current authenticated user profile",
        "description": "Returns the profile information of the currently authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "email": { "type": "string", "format": "email", "example": "user@example.com" },
                    "first_name": { "type": "string", "example": "John" },
                    "last_name": { "type": "string", "example": "Doe" }
                  }
                }
              }
            }
          },
          "401": { 
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "Unauthorized" }
                  }
                }
              }
            }
          },
          "404": { 
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "User not found" }
                  }
                }
              }
            }
          },
          "500": { 
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": { "type": "string", "example": "Invalid user context" }
                  }
                }
              }
            }
          }
        },
        "tags": ["auth"]
      }
    },
    "/user/profile/{id}": {
      "get": {
        "summary": "Get user profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "integer" },
                    "email": { "type": "string", "format": "email" },
                    "first_name": { "type": "string" },
                    "last_name": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": { "description": "User not found" }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "csrfAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-CSRF-Token"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    },
    {
      "csrfAuth": []
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Authentication related endpoints"
    }
  ]
}